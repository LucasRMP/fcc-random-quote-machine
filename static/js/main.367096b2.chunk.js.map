{"version":3,"sources":["services/api.js","services/utils.js","App.js","index.js"],"names":["api","axios","create","baseURL","mountTweetUrl","quote","text","author","split","join","colors","App","useState","setQuote","loading","setLoading","color","setColor","fetchData","useCallback","a","async","get","response","data","content","length","changeColor","index","Math","floor","random","useEffect","className","style","backgroundColor","id","icon","faQuoteRight","flip","size","type","onClick","e","href","target","faTwitter","ReactDOM","render","document","getElementById"],"mappings":"0SAMeA,E,OAJHC,EAAMC,OAAO,CACvBC,QAAS,4BCHJ,SAASC,EAAcC,GAAQ,IAC9BC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,OAIZ,OAHAD,EAAOA,EAAKE,MAAM,KAAKC,KAAK,OAC5BF,EAASA,EAAOC,MAAM,KAAKC,KAAK,OACvB,mEAA+DH,EAA/D,qBAAgFC,GAIpF,IAAMG,EAAS,CACpB,OACA,UACA,UACA,UACA,UACA,UACA,W,8BC2EaC,MA/Ef,WAAgB,IAAD,EACaC,mBAAS,CACjCN,KAAM,GACNC,OAAQ,KAHG,mBACNF,EADM,KACCQ,EADD,OAKiBD,oBAAS,GAL1B,mBAKNE,EALM,KAKGC,EALH,OAMaH,mBAAS,QANtB,mBAMNI,EANM,KAMCC,EAND,KAQPC,EAAYC,uBAAY,4BAAAC,EAAAC,OAAA,uDAC5BN,GAAW,GADiB,WAAAK,EAAA,MAELpB,EAAIsB,IAAI,YAFH,OAEtBC,EAFsB,QAGtBC,EAAOD,EAASC,MACbC,QAAQC,QAAU,KACzBb,EAAS,CAAEP,KAAMkB,EAAKC,QAASlB,OAAQiB,EAAKjB,SAC5CoB,KAEAT,IAEFH,GAAW,GAViB,uCAW3B,IAEGY,EAAc,WAClB,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWrB,EAAOgB,QAChDT,EAASP,EAAOkB,KAWlB,OARAI,qBAAU,WACRd,MACC,CAACA,IAOF,yBAAKe,UAAU,MAAMC,MAAO,CAAEC,gBAAiBnB,IAC7C,kBAAC,kBAAD,MACIF,GACA,yBAAKsB,GAAG,aACN,yBAAKA,GAAG,gBACN,kBAAC,IAAD,CACEA,GAAG,aACHC,KAAMC,IACNtB,MAAOA,EACPuB,KAAK,aACLC,KAAK,OAEP,wBAAIJ,GAAG,OAAOF,MAAO,CAAElB,UACpBX,EAAMC,OAGX,wBAAI8B,GAAG,SAASF,MAAO,CAAElB,UAAzB,SACU,IAAKX,EAAME,QAErB,yBAAK6B,GAAG,UACN,4BACEA,GAAG,YACHK,KAAK,SACLC,QA5BM,SAAAC,GAClBzB,KA4BYgB,MAAO,CAAEC,gBAAiBnB,IAJ5B,aAQA,uBAAG4B,KAAMxC,EAAcC,GAAQ+B,GAAG,cAAcS,OAAO,SACrD,kBAAC,IAAD,CACER,KAAMS,IACN9B,MAAOA,EACPuB,KAAK,aACLC,KAAK,aC1EvBO,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.367096b2.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.quotable.io',\n});\n\nexport default api;\n","export function mountTweetUrl(quote) {\n  let { text, author } = quote;\n  text = text.split(' ').join('%20');\n  author = author.split(' ').join('%20');\n  const url = `https://twitter.com/intent/tweet?hashtags=quotes&text=%22${text}%22%20-%20${author}`;\n  return url;\n}\n\nexport const colors = [\n  '#222',\n  '#7159C1',\n  '#2292A4',\n  '#008148',\n  '#00BD9D',\n  '#DA2C38',\n  '#43291F',\n];\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport api from './services/api';\nimport { mountTweetUrl, colors } from './services/utils';\n\nimport { AnimateOnChange } from 'react-animation';\nimport { faQuoteRight } from '@fortawesome/free-solid-svg-icons';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nimport './App.css';\n\nfunction App() {\n  const [quote, setQuote] = useState({\n    text: '',\n    author: '',\n  });\n  const [loading, setLoading] = useState(true);\n  const [color, setColor] = useState('#000');\n\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n    const response = await api.get('/random');\n    const data = response.data;\n    if (data.content.length <= 200) {\n      setQuote({ text: data.content, author: data.author });\n      changeColor();\n    } else {\n      fetchData();\n    }\n    setLoading(false);\n  }, []);\n\n  const changeColor = () => {\n    const index = Math.floor(Math.random() * colors.length);\n    setColor(colors[index]);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  const handleClick = e => {\n    fetchData();\n  };\n\n  return (\n    <div className='App' style={{ backgroundColor: color }}>\n      <AnimateOnChange>\n        {!loading && (\n          <div id='quote-box'>\n            <div id=\"text-wrapper\">\n              <FontAwesomeIcon\n                id=\"quote-icon\"\n                icon={faQuoteRight}\n                color={color}\n                flip='horizontal'\n                size='2x'\n                />\n              <h1 id='text' style={{ color }}>\n                {quote.text}\n              </h1>\n            </div>\n            <h3 id='author' style={{ color }}>\n              &#8212;{\" \"}{quote.author}\n            </h3>\n            <div id=\"footer\">\n              <button\n                id='new-quote'\n                type='submit'\n                onClick={handleClick}\n                style={{ backgroundColor: color }}\n              >\n                New quote\n              </button>\n              <a href={mountTweetUrl(quote)} id='tweet-quote' target='blank'>\n                <FontAwesomeIcon\n                  icon={faTwitter}\n                  color={color}\n                  flip='horizontal'\n                  size='2x'\n                />\n              </a>\n            </div>\n          </div>\n        )}\n      </AnimateOnChange>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}